{"version":3,"file":"wallet.js","sources":["src/lib/keys.js","src/index.js"],"sourcesContent":["import { randomBytes } from 'crypto';\r\nimport { privateKeyVerify, publicKeyVerify, publicKeyCreate, verify, sign } from 'secp256k1';\r\nimport { encode, decode } from 'bs58';\r\n\r\nexport const createPrivateKey = () => {\r\n  const key = randomBytes(32);\r\n  const ok = privateKeyVerify(key);\r\n  if (!ok) { // TODO: is this even needed?\r\n    return createPrivateKey();\r\n  }\r\n  return key;\r\n}\r\n\r\n/**\r\n * @param {string} privateKey the privateKey to create the publickey from\r\n */\r\nexport const createPublicKey = privateKey => {\r\n  if (!privateKey) {\r\n    privateKey = createPrivateKey();\r\n  }\r\n  const key = publicKeyCreate(privateKey);\r\n  const ok = publicKeyVerify(key);\r\n  if (!ok) { // TODO: is this even needed?\r\n    return createPublicKey();\r\n  }\r\n  return key;\r\n}\r\n\r\nexport const generateKeyPair = () => new Promise(resolve => {\r\n  // define keys\r\n  const keys = {\r\n    private: '',\r\n    public: ''\r\n  }\r\n  // create a privateKey\r\n  keys.private = createPrivateKey();\r\n  // create a public key with the privateKey & encode with bs58\r\n  keys.public = encode(createPublicKey(keys.private));\r\n  // convert to 'hex' string\r\n  keys.private = keys.private.toString('hex');\r\n  // resolve private & public keys\r\n  resolve(keys);\r\n});\r\n\r\nexport const buffer = (value, enc = 'hex') => {\r\n  return Buffer.from(value, enc);\r\n}\r\n\r\nexport const signHash = (privateKey, hash) => {\r\n  return sign(buffer(hash), buffer(privateKey)).signature.toString('base64');\r\n}\r\n\r\nexport const verifySignature = (address, signature, hash) => {\r\n  return verify(buffer(hash), buffer(signature), decode(address));\r\n}\r\n","import { encrypt, decrypt } from 'crypto-io-utils';\r\nimport { StoreHandler, Store } from 'crypto-store';\r\nexport * from './lib/keys.js';\r\n\r\nexport class CryptoWallet extends StoreHandler {\r\n  constructor(keys, secret) {\r\n    super('hex');\r\n    this.secret = secret;\r\n    this.private = keys.private;\r\n    this.public = keys.public;\r\n  }\r\n\r\n  get _jsonWallet() {\r\n    return JSON.stringify({\r\n      private: this.private,\r\n      public: this.public\r\n    })\r\n  }\r\n\r\n  lock(secret) {\r\n    return encrypt(this._jsonWallet, secret)\r\n      .then(cipher => this._cipher = cipher);\r\n  }\r\n\r\n  unlock(secret) {\r\n    return decrypt(this._cipher, secret).then(data => JSON.parse(data));\r\n  }\r\n}\r\n"],"names":["createPrivateKey","key","randomBytes","ok","privateKeyVerify","createPublicKey","privateKey","publicKeyCreate","publicKeyVerify","generateKeyPair","Promise","resolve","keys","private","public","encode","toString","buffer","value","enc","Buffer","from","signHash","hash","sign","signature","verifySignature","address","verify","decode","CryptoWallet","StoreHandler","secret","_jsonWallet","JSON","stringify","encrypt","then","cipher","_cipher","decrypt","data","parse"],"mappings":";;;;;;;;;;AAIO,MAAMA,mBAAmB,MAAM;QAC9BC,MAAMC,mBAAY,EAAZ,CAAZ;QACMC,KAAKC,2BAAiBH,GAAjB,CAAX;MACI,CAACE,EAAL,EAAS;WACAH,kBAAP;;SAEKC,GAAP;CANK;AAYP,AAAO,MAAMI,kBAAkBC,cAAc;MACvC,CAACA,UAAL,EAAiB;iBACFN,kBAAb;;QAEIC,MAAMM,0BAAgBD,UAAhB,CAAZ;QACMH,KAAKK,0BAAgBP,GAAhB,CAAX;MACI,CAACE,EAAL,EAAS;WACAE,iBAAP;;SAEKJ,GAAP;CATK;AAYP,AAAO,MAAMQ,kBAAkB,MAAM,IAAIC,OAAJ,CAAYC,WAAW;QAEpDC,OAAO;aACF,EADE;YAEH;GAFV,CAKAA,KAAKC,OAAL,GAAeb,kBAAf;OAEKc,MAAL,GAAcC,YAAOV,gBAAgBO,KAAKC,OAArB,CAAP,CAAd;OAEKA,OAAL,GAAeD,KAAKC,OAAL,CAAaG,QAAb,CAAsB,KAAtB,CAAf;UAEQJ,IAAR;CAbmC,CAA9B;AAgBP,AAAO,MAAMK,SAAS,CAACC,KAAD,EAAQC,MAAM,KAAd,KAAwB;SACrCC,OAAOC,IAAP,CAAYH,KAAZ,EAAmBC,GAAnB,CAAP;CADK;AAIP,AAAO,MAAMG,WAAW,CAAChB,UAAD,EAAaiB,IAAb,KAAsB;SACrCC,eAAKP,OAAOM,IAAP,CAAL,EAAmBN,OAAOX,UAAP,CAAnB,EAAuCmB,SAAvC,CAAiDT,QAAjD,CAA0D,QAA1D,CAAP;CADK;AAIP,AAAO,MAAMU,kBAAkB,CAACC,OAAD,EAAUF,SAAV,EAAqBF,IAArB,KAA8B;SACpDK,iBAAOX,OAAOM,IAAP,CAAP,EAAqBN,OAAOQ,SAAP,CAArB,EAAwCI,YAAOF,OAAP,CAAxC,CAAP;CADK;;AChDA,MAAMG,YAAN,SAA2BC,wBAA3B,CAAwC;cACjCnB,IAAZ,EAAkBoB,MAAlB,EAA0B;UAClB,KAAN;SACKA,MAAL,GAAcA,MAAd;SACKnB,OAAL,GAAeD,KAAKC,OAApB;SACKC,MAAL,GAAcF,KAAKE,MAAnB;;MAGEmB,WAAJ,GAAkB;WACTC,KAAKC,SAAL,CAAe;eACX,KAAKtB,OADM;cAEZ,KAAKC;KAFR,CAAP;;OAMGkB,MAAL,EAAa;WACJI,sBAAQ,KAAKH,WAAb,EAA0BD,MAA1B,EACJK,IADI,CACCC,UAAU,KAAKC,OAAL,GAAeD,MAD1B,CAAP;;SAIKN,MAAP,EAAe;WACNQ,sBAAQ,KAAKD,OAAb,EAAsBP,MAAtB,EAA8BK,IAA9B,CAAmCI,QAAQP,KAAKQ,KAAL,CAAWD,IAAX,CAA3C,CAAP;;;;;;;;;;"}